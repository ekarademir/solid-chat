// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "chat.proto" (package "chat", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// 
// Common
// 

/**
 * @generated from protobuf message chat.FindParameter
 */
export interface FindParameter {
    /**
     * @generated from protobuf oneof: find_oneof
     */
    findOneof: {
        oneofKind: "id";
        /**
         * @generated from protobuf field: int32 id = 1;
         */
        id: number;
    } | {
        oneofKind: "name";
        /**
         * @generated from protobuf field: string name = 2;
         */
        name: string;
    } | {
        oneofKind: "uuid";
        /**
         * @generated from protobuf field: string uuid = 3;
         */
        uuid: string;
    } | {
        oneofKind: "username";
        /**
         * @generated from protobuf field: string username = 4;
         */
        username: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message chat.FindRequest
 */
export interface FindRequest {
    /**
     * @generated from protobuf field: chat.FindParameter param = 1;
     */
    param?: FindParameter;
}
/**
 * @generated from protobuf message chat.ListRequest
 */
export interface ListRequest {
    /**
     * @generated from protobuf field: int32 start = 1;
     */
    start: number;
    /**
     * @generated from protobuf field: int32 count = 2;
     */
    count: number;
}
/**
 * @generated from protobuf message chat.FindWithTenantRequest
 */
export interface FindWithTenantRequest {
    /**
     * @generated from protobuf field: string tenant_name = 1;
     */
    tenantName: string;
    /**
     * @generated from protobuf field: chat.FindParameter param = 2;
     */
    param?: FindParameter;
}
/**
 * @generated from protobuf message chat.ListWithTenantRequest
 */
export interface ListWithTenantRequest {
    /**
     * @generated from protobuf field: string tenant_name = 1;
     */
    tenantName: string;
    /**
     * @generated from protobuf field: int32 start = 2;
     */
    start: number;
    /**
     * @generated from protobuf field: int32 count = 3;
     */
    count: number;
}
/**
 * @generated from protobuf message chat.BasicAuthenticationRequest
 */
export interface BasicAuthenticationRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: bool long_session = 3;
     */
    longSession: boolean;
    /**
     * @generated from protobuf field: optional string tenant_name = 4;
     */
    tenantName?: string;
}
/**
 * @generated from protobuf message chat.BasicAuthenticationResponse
 */
export interface BasicAuthenticationResponse {
    /**
     * @generated from protobuf field: string session_token = 1;
     */
    sessionToken: string;
    /**
     * @generated from protobuf field: string session_state = 2;
     */
    sessionState: string;
}
/**
 * @generated from protobuf message chat.LogoutRequest
 */
export interface LogoutRequest {
}
/**
 * @generated from protobuf message chat.LogoutResponse
 */
export interface LogoutResponse {
}
// 
// /Common
// 

// 
// Tenants
// 

/**
 * @generated from protobuf message chat.Tenant
 */
export interface Tenant {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message chat.TenantResponse
 */
export interface TenantResponse {
    /**
     * @generated from protobuf field: chat.Tenant tenant = 1;
     */
    tenant?: Tenant;
}
/**
 * @generated from protobuf message chat.User
 */
export interface User {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: chat.UserKind kind = 3;
     */
    kind: UserKind;
    /**
     * @generated from protobuf field: optional string fullname = 4;
     */
    fullname?: string;
    /**
     * @generated from protobuf field: string tenant_name = 5;
     */
    tenantName: string;
}
/**
 * @generated from protobuf message chat.UserAdminResponse
 */
export interface UserAdminResponse {
    /**
     * @generated from protobuf field: chat.User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message chat.UserPassword
 */
export interface UserPassword {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: string tenant_name = 3;
     */
    tenantName: string;
}
/**
 * @generated from protobuf enum chat.UserKind
 */
export enum UserKind {
    /**
     * @generated from protobuf enum value: VISITOR = 0;
     */
    VISITOR = 0,
    /**
     * @generated from protobuf enum value: INVITEE = 1;
     */
    INVITEE = 1,
    /**
     * @generated from protobuf enum value: REGISTERED = 2;
     */
    REGISTERED = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class FindParameter$Type extends MessageType<FindParameter> {
    constructor() {
        super("chat.FindParameter", [
            { no: 1, name: "id", kind: "scalar", oneof: "findOneof", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", oneof: "findOneof", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "uuid", kind: "scalar", oneof: "findOneof", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "username", kind: "scalar", oneof: "findOneof", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FindParameter>): FindParameter {
        const message = { findOneof: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FindParameter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindParameter): FindParameter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.findOneof = {
                        oneofKind: "id",
                        id: reader.int32()
                    };
                    break;
                case /* string name */ 2:
                    message.findOneof = {
                        oneofKind: "name",
                        name: reader.string()
                    };
                    break;
                case /* string uuid */ 3:
                    message.findOneof = {
                        oneofKind: "uuid",
                        uuid: reader.string()
                    };
                    break;
                case /* string username */ 4:
                    message.findOneof = {
                        oneofKind: "username",
                        username: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FindParameter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.findOneof.oneofKind === "id")
            writer.tag(1, WireType.Varint).int32(message.findOneof.id);
        /* string name = 2; */
        if (message.findOneof.oneofKind === "name")
            writer.tag(2, WireType.LengthDelimited).string(message.findOneof.name);
        /* string uuid = 3; */
        if (message.findOneof.oneofKind === "uuid")
            writer.tag(3, WireType.LengthDelimited).string(message.findOneof.uuid);
        /* string username = 4; */
        if (message.findOneof.oneofKind === "username")
            writer.tag(4, WireType.LengthDelimited).string(message.findOneof.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.FindParameter
 */
export const FindParameter = new FindParameter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindRequest$Type extends MessageType<FindRequest> {
    constructor() {
        super("chat.FindRequest", [
            { no: 1, name: "param", kind: "message", T: () => FindParameter }
        ]);
    }
    create(value?: PartialMessage<FindRequest>): FindRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FindRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindRequest): FindRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* chat.FindParameter param */ 1:
                    message.param = FindParameter.internalBinaryRead(reader, reader.uint32(), options, message.param);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FindRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* chat.FindParameter param = 1; */
        if (message.param)
            FindParameter.internalBinaryWrite(message.param, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.FindRequest
 */
export const FindRequest = new FindRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRequest$Type extends MessageType<ListRequest> {
    constructor() {
        super("chat.ListRequest", [
            { no: 1, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListRequest>): ListRequest {
        const message = { start: 0, count: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequest): ListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 start */ 1:
                    message.start = reader.int32();
                    break;
                case /* int32 count */ 2:
                    message.count = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 start = 1; */
        if (message.start !== 0)
            writer.tag(1, WireType.Varint).int32(message.start);
        /* int32 count = 2; */
        if (message.count !== 0)
            writer.tag(2, WireType.Varint).int32(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.ListRequest
 */
export const ListRequest = new ListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindWithTenantRequest$Type extends MessageType<FindWithTenantRequest> {
    constructor() {
        super("chat.FindWithTenantRequest", [
            { no: 1, name: "tenant_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "param", kind: "message", T: () => FindParameter }
        ]);
    }
    create(value?: PartialMessage<FindWithTenantRequest>): FindWithTenantRequest {
        const message = { tenantName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FindWithTenantRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindWithTenantRequest): FindWithTenantRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tenant_name */ 1:
                    message.tenantName = reader.string();
                    break;
                case /* chat.FindParameter param */ 2:
                    message.param = FindParameter.internalBinaryRead(reader, reader.uint32(), options, message.param);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FindWithTenantRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tenant_name = 1; */
        if (message.tenantName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tenantName);
        /* chat.FindParameter param = 2; */
        if (message.param)
            FindParameter.internalBinaryWrite(message.param, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.FindWithTenantRequest
 */
export const FindWithTenantRequest = new FindWithTenantRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListWithTenantRequest$Type extends MessageType<ListWithTenantRequest> {
    constructor() {
        super("chat.ListWithTenantRequest", [
            { no: 1, name: "tenant_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListWithTenantRequest>): ListWithTenantRequest {
        const message = { tenantName: "", start: 0, count: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListWithTenantRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListWithTenantRequest): ListWithTenantRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tenant_name */ 1:
                    message.tenantName = reader.string();
                    break;
                case /* int32 start */ 2:
                    message.start = reader.int32();
                    break;
                case /* int32 count */ 3:
                    message.count = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListWithTenantRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tenant_name = 1; */
        if (message.tenantName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tenantName);
        /* int32 start = 2; */
        if (message.start !== 0)
            writer.tag(2, WireType.Varint).int32(message.start);
        /* int32 count = 3; */
        if (message.count !== 0)
            writer.tag(3, WireType.Varint).int32(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.ListWithTenantRequest
 */
export const ListWithTenantRequest = new ListWithTenantRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BasicAuthenticationRequest$Type extends MessageType<BasicAuthenticationRequest> {
    constructor() {
        super("chat.BasicAuthenticationRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "long_session", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "tenant_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BasicAuthenticationRequest>): BasicAuthenticationRequest {
        const message = { username: "", password: "", longSession: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BasicAuthenticationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BasicAuthenticationRequest): BasicAuthenticationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* bool long_session */ 3:
                    message.longSession = reader.bool();
                    break;
                case /* optional string tenant_name */ 4:
                    message.tenantName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BasicAuthenticationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* bool long_session = 3; */
        if (message.longSession !== false)
            writer.tag(3, WireType.Varint).bool(message.longSession);
        /* optional string tenant_name = 4; */
        if (message.tenantName !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.tenantName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.BasicAuthenticationRequest
 */
export const BasicAuthenticationRequest = new BasicAuthenticationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BasicAuthenticationResponse$Type extends MessageType<BasicAuthenticationResponse> {
    constructor() {
        super("chat.BasicAuthenticationResponse", [
            { no: 1, name: "session_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "session_state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BasicAuthenticationResponse>): BasicAuthenticationResponse {
        const message = { sessionToken: "", sessionState: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BasicAuthenticationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BasicAuthenticationResponse): BasicAuthenticationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_token */ 1:
                    message.sessionToken = reader.string();
                    break;
                case /* string session_state */ 2:
                    message.sessionState = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BasicAuthenticationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_token = 1; */
        if (message.sessionToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionToken);
        /* string session_state = 2; */
        if (message.sessionState !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.BasicAuthenticationResponse
 */
export const BasicAuthenticationResponse = new BasicAuthenticationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutRequest$Type extends MessageType<LogoutRequest> {
    constructor() {
        super("chat.LogoutRequest", []);
    }
    create(value?: PartialMessage<LogoutRequest>): LogoutRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LogoutRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutRequest): LogoutRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LogoutRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.LogoutRequest
 */
export const LogoutRequest = new LogoutRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutResponse$Type extends MessageType<LogoutResponse> {
    constructor() {
        super("chat.LogoutResponse", []);
    }
    create(value?: PartialMessage<LogoutResponse>): LogoutResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LogoutResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutResponse): LogoutResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LogoutResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.LogoutResponse
 */
export const LogoutResponse = new LogoutResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Tenant$Type extends MessageType<Tenant> {
    constructor() {
        super("chat.Tenant", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Tenant>): Tenant {
        const message = { id: 0, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Tenant>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tenant): Tenant {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Tenant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.Tenant
 */
export const Tenant = new Tenant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TenantResponse$Type extends MessageType<TenantResponse> {
    constructor() {
        super("chat.TenantResponse", [
            { no: 1, name: "tenant", kind: "message", T: () => Tenant }
        ]);
    }
    create(value?: PartialMessage<TenantResponse>): TenantResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TenantResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TenantResponse): TenantResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* chat.Tenant tenant */ 1:
                    message.tenant = Tenant.internalBinaryRead(reader, reader.uint32(), options, message.tenant);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TenantResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* chat.Tenant tenant = 1; */
        if (message.tenant)
            Tenant.internalBinaryWrite(message.tenant, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.TenantResponse
 */
export const TenantResponse = new TenantResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("chat.User", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "kind", kind: "enum", T: () => ["chat.UserKind", UserKind] },
            { no: 4, name: "fullname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "tenant_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = { id: "", username: "", kind: 0, tenantName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* chat.UserKind kind */ 3:
                    message.kind = reader.int32();
                    break;
                case /* optional string fullname */ 4:
                    message.fullname = reader.string();
                    break;
                case /* string tenant_name */ 5:
                    message.tenantName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* chat.UserKind kind = 3; */
        if (message.kind !== 0)
            writer.tag(3, WireType.Varint).int32(message.kind);
        /* optional string fullname = 4; */
        if (message.fullname !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.fullname);
        /* string tenant_name = 5; */
        if (message.tenantName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.tenantName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserAdminResponse$Type extends MessageType<UserAdminResponse> {
    constructor() {
        super("chat.UserAdminResponse", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<UserAdminResponse>): UserAdminResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserAdminResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserAdminResponse): UserAdminResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* chat.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserAdminResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* chat.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.UserAdminResponse
 */
export const UserAdminResponse = new UserAdminResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserPassword$Type extends MessageType<UserPassword> {
    constructor() {
        super("chat.UserPassword", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tenant_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserPassword>): UserPassword {
        const message = { username: "", password: "", tenantName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserPassword>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserPassword): UserPassword {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* string tenant_name */ 3:
                    message.tenantName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserPassword, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* string tenant_name = 3; */
        if (message.tenantName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.tenantName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat.UserPassword
 */
export const UserPassword = new UserPassword$Type();
/**
 * @generated ServiceType for protobuf service chat.Authentication
 */
export const Authentication = new ServiceType("chat.Authentication", [
    { name: "BasicAuthentication", options: {}, I: BasicAuthenticationRequest, O: BasicAuthenticationResponse },
    { name: "Logout", options: {}, I: LogoutRequest, O: LogoutResponse }
]);
/**
 * @generated ServiceType for protobuf service chat.Tenants
 */
export const Tenants = new ServiceType("chat.Tenants", [
    { name: "Create", options: {}, I: Tenant, O: TenantResponse },
    { name: "List", serverStreaming: true, options: {}, I: ListRequest, O: Tenant },
    { name: "Delete", options: {}, I: FindRequest, O: TenantResponse }
]);
/**
 * @generated ServiceType for protobuf service chat.UsersAdmin
 */
export const UsersAdmin = new ServiceType("chat.UsersAdmin", [
    { name: "Create", options: {}, I: User, O: UserAdminResponse },
    { name: "List", serverStreaming: true, options: {}, I: ListWithTenantRequest, O: User },
    { name: "Delete", options: {}, I: FindWithTenantRequest, O: UserAdminResponse },
    { name: "Update", options: {}, I: User, O: UserAdminResponse },
    { name: "SetPassword", options: {}, I: UserPassword, O: UserAdminResponse }
]);
